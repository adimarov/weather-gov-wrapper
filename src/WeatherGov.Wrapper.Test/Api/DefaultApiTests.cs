/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test AlertsActive
        /// </summary>
        [Fact]
        public void AlertsActiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? status = null;
            //List<string>? messageType = null;
            //List<string>? varEvent = null;
            //List<string>? code = null;
            //List<AreaCode>? area = null;
            //string? point = null;
            //List<MarineRegionCode>? region = null;
            //string? regionType = null;
            //List<string>? zone = null;
            //List<AlertUrgency>? urgency = null;
            //List<AlertSeverity>? severity = null;
            //List<AlertCertainty>? certainty = null;
            //int? limit = null;
            //var response = instance.AlertsActive(status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit);
            //Assert.IsType<AlertCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsActiveArea
        /// </summary>
        [Fact]
        public void AlertsActiveAreaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AreaCode area = null;
            //var response = instance.AlertsActiveArea(area);
            //Assert.IsType<AlertCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsActiveCount
        /// </summary>
        [Fact]
        public void AlertsActiveCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AlertsActiveCount();
            //Assert.IsType<AlertsActiveCount200Response>(response);
        }

        /// <summary>
        /// Test AlertsActiveRegion
        /// </summary>
        [Fact]
        public void AlertsActiveRegionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarineRegionCode region = null;
            //var response = instance.AlertsActiveRegion(region);
            //Assert.IsType<AlertCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsActiveZone
        /// </summary>
        [Fact]
        public void AlertsActiveZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string zoneId = null;
            //var response = instance.AlertsActiveZone(zoneId);
            //Assert.IsType<AlertCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsQuery
        /// </summary>
        [Fact]
        public void AlertsQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? active = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //List<string>? status = null;
            //List<string>? messageType = null;
            //List<string>? varEvent = null;
            //List<string>? code = null;
            //List<AreaCode>? area = null;
            //string? point = null;
            //List<MarineRegionCode>? region = null;
            //string? regionType = null;
            //List<string>? zone = null;
            //List<AlertUrgency>? urgency = null;
            //List<AlertSeverity>? severity = null;
            //List<AlertCertainty>? certainty = null;
            //int? limit = null;
            //string? cursor = null;
            //var response = instance.AlertsQuery(active, start, end, status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, cursor);
            //Assert.IsType<AlertCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsSingle
        /// </summary>
        [Fact]
        public void AlertsSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AlertsSingle(id);
            //Assert.IsType<AlertGeoJson>(response);
        }

        /// <summary>
        /// Test AlertsTypes
        /// </summary>
        [Fact]
        public void AlertsTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AlertsTypes();
            //Assert.IsType<AlertsTypes200Response>(response);
        }

        /// <summary>
        /// Test Cwa
        /// </summary>
        [Fact]
        public void CwaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSCenterWeatherServiceUnitId cwsuId = null;
            //DateTime date = null;
            //int sequence = null;
            //var response = instance.Cwa(cwsuId, date, sequence);
            //Assert.IsType<CenterWeatherAdvisoryGeoJson>(response);
        }

        /// <summary>
        /// Test Cwas
        /// </summary>
        [Fact]
        public void CwasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSCenterWeatherServiceUnitId cwsuId = null;
            //var response = instance.Cwas(cwsuId);
            //Assert.IsType<CenterWeatherAdvisoryCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test Cwsu
        /// </summary>
        [Fact]
        public void CwsuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSCenterWeatherServiceUnitId cwsuId = null;
            //var response = instance.Cwsu(cwsuId);
            //Assert.IsType<Office>(response);
        }

        /// <summary>
        /// Test Glossary
        /// </summary>
        [Fact]
        public void GlossaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Glossary();
            //Assert.IsType<Glossary200Response>(response);
        }

        /// <summary>
        /// Test Gridpoint
        /// </summary>
        [Fact]
        public void GridpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSForecastOfficeId wfo = null;
            //int x = null;
            //int y = null;
            //var response = instance.Gridpoint(wfo, x, y);
            //Assert.IsType<GridpointGeoJson>(response);
        }

        /// <summary>
        /// Test GridpointForecast
        /// </summary>
        [Fact]
        public void GridpointForecastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSForecastOfficeId wfo = null;
            //int x = null;
            //int y = null;
            //List<string>? featureFlags = null;
            //GridpointForecastUnits? units = null;
            //var response = instance.GridpointForecast(wfo, x, y, featureFlags, units);
            //Assert.IsType<GridpointForecastGeoJson>(response);
        }

        /// <summary>
        /// Test GridpointForecastHourly
        /// </summary>
        [Fact]
        public void GridpointForecastHourlyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSForecastOfficeId wfo = null;
            //int x = null;
            //int y = null;
            //List<string>? featureFlags = null;
            //GridpointForecastUnits? units = null;
            //var response = instance.GridpointForecastHourly(wfo, x, y, featureFlags, units);
            //Assert.IsType<GridpointForecastGeoJson>(response);
        }

        /// <summary>
        /// Test GridpointStations
        /// </summary>
        [Fact]
        public void GridpointStationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSForecastOfficeId wfo = null;
            //int x = null;
            //int y = null;
            //int? limit = null;
            //string? cursor = null;
            //var response = instance.GridpointStations(wfo, x, y, limit, cursor);
            //Assert.IsType<ObservationStationCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test Icons
        /// </summary>
        [Fact]
        public void IconsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //string timeOfDay = null;
            //string first = null;
            //IconsSizeParameter? size = null;
            //int? fontsize = null;
            //var response = instance.Icons(set, timeOfDay, first, size, fontsize);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test IconsDualCondition
        /// </summary>
        [Fact]
        public void IconsDualConditionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string set = null;
            //string timeOfDay = null;
            //string first = null;
            //string second = null;
            //IconsSizeParameter? size = null;
            //int? fontsize = null;
            //var response = instance.IconsDualCondition(set, timeOfDay, first, second, size, fontsize);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test IconsSummary
        /// </summary>
        [Fact]
        public void IconsSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IconsSummary();
            //Assert.IsType<IconsSummary200Response>(response);
        }

        /// <summary>
        /// Test LocationProducts
        /// </summary>
        [Fact]
        public void LocationProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string locationId = null;
            //var response = instance.LocationProducts(locationId);
            //Assert.IsType<TextProductTypeCollection>(response);
        }

        /// <summary>
        /// Test ObsStation
        /// </summary>
        [Fact]
        public void ObsStationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //var response = instance.ObsStation(stationId);
            //Assert.IsType<ObservationStationGeoJson>(response);
        }

        /// <summary>
        /// Test ObsStations
        /// </summary>
        [Fact]
        public void ObsStationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? id = null;
            //List<AreaCode>? state = null;
            //int? limit = null;
            //string? cursor = null;
            //var response = instance.ObsStations(id, state, limit, cursor);
            //Assert.IsType<ObservationStationCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test Office
        /// </summary>
        [Fact]
        public void OfficeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSOfficeId officeId = null;
            //var response = instance.Office(officeId);
            //Assert.IsType<Office>(response);
        }

        /// <summary>
        /// Test OfficeHeadline
        /// </summary>
        [Fact]
        public void OfficeHeadlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSOfficeId officeId = null;
            //string headlineId = null;
            //var response = instance.OfficeHeadline(officeId, headlineId);
            //Assert.IsType<OfficeHeadline>(response);
        }

        /// <summary>
        /// Test OfficeHeadlines
        /// </summary>
        [Fact]
        public void OfficeHeadlinesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSOfficeId officeId = null;
            //var response = instance.OfficeHeadlines(officeId);
            //Assert.IsType<OfficeHeadlineCollection>(response);
        }

        /// <summary>
        /// Test Point
        /// </summary>
        [Fact]
        public void PointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string point = null;
            //var response = instance.Point(point);
            //Assert.IsType<PointGeoJson>(response);
        }

        /// <summary>
        /// Test PointStations
        /// </summary>
        [Fact]
        public void PointStationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string point = null;
            //var response = instance.PointStations(point);
            //Assert.IsType<ProblemDetail>(response);
        }

        /// <summary>
        /// Test Product
        /// </summary>
        [Fact]
        public void ProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string productId = null;
            //var response = instance.Product(productId);
            //Assert.IsType<TextProduct>(response);
        }

        /// <summary>
        /// Test ProductLocations
        /// </summary>
        [Fact]
        public void ProductLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProductLocations();
            //Assert.IsType<TextProductLocationCollection>(response);
        }

        /// <summary>
        /// Test ProductTypes
        /// </summary>
        [Fact]
        public void ProductTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ProductTypes();
            //Assert.IsType<TextProductTypeCollection>(response);
        }

        /// <summary>
        /// Test ProductsQuery
        /// </summary>
        [Fact]
        public void ProductsQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? location = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //List<string>? office = null;
            //List<string>? wmoid = null;
            //List<string>? type = null;
            //int? limit = null;
            //var response = instance.ProductsQuery(location, start, end, office, wmoid, type, limit);
            //Assert.IsType<TextProductCollection>(response);
        }

        /// <summary>
        /// Test ProductsType
        /// </summary>
        [Fact]
        public void ProductsTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //var response = instance.ProductsType(typeId);
            //Assert.IsType<TextProductCollection>(response);
        }

        /// <summary>
        /// Test ProductsTypeLocation
        /// </summary>
        [Fact]
        public void ProductsTypeLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //string locationId = null;
            //var response = instance.ProductsTypeLocation(typeId, locationId);
            //Assert.IsType<TextProductCollection>(response);
        }

        /// <summary>
        /// Test ProductsTypeLocations
        /// </summary>
        [Fact]
        public void ProductsTypeLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string typeId = null;
            //var response = instance.ProductsTypeLocations(typeId);
            //Assert.IsType<TextProductLocationCollection>(response);
        }

        /// <summary>
        /// Test RadarProfiler
        /// </summary>
        [Fact]
        public void RadarProfilerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //ISO8601Interval? time = null;
            //string? interval = null;
            //var response = instance.RadarProfiler(stationId, time, interval);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarQueue
        /// </summary>
        [Fact]
        public void RadarQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string host = null;
            //int? limit = null;
            //ISO8601Interval? arrived = null;
            //ISO8601Interval? created = null;
            //ISO8601Interval? published = null;
            //string? station = null;
            //string? type = null;
            //string? feed = null;
            //int? resolution = null;
            //var response = instance.RadarQueue(host, limit, arrived, created, published, station, type, feed, resolution);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarServer
        /// </summary>
        [Fact]
        public void RadarServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? reportingHost = null;
            //var response = instance.RadarServer(id, reportingHost);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarServers
        /// </summary>
        [Fact]
        public void RadarServersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? reportingHost = null;
            //var response = instance.RadarServers(reportingHost);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarStation
        /// </summary>
        [Fact]
        public void RadarStationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //string? reportingHost = null;
            //string? host = null;
            //var response = instance.RadarStation(stationId, reportingHost, host);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarStationAlarms
        /// </summary>
        [Fact]
        public void RadarStationAlarmsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //var response = instance.RadarStationAlarms(stationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RadarStations
        /// </summary>
        [Fact]
        public void RadarStationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? stationType = null;
            //string? reportingHost = null;
            //string? host = null;
            //var response = instance.RadarStations(stationType, reportingHost, host);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SatelliteThumbnails
        /// </summary>
        [Fact]
        public void SatelliteThumbnailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string area = null;
            //var response = instance.SatelliteThumbnails(area);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test Sigmet
        /// </summary>
        [Fact]
        public void SigmetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string atsu = null;
            //DateTime date = null;
            //string time = null;
            //var response = instance.Sigmet(atsu, date, time);
            //Assert.IsType<SigmetGeoJson>(response);
        }

        /// <summary>
        /// Test SigmetQuery
        /// </summary>
        [Fact]
        public void SigmetQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? start = null;
            //DateTime? end = null;
            //DateTime? date = null;
            //string? atsu = null;
            //string? sequence = null;
            //var response = instance.SigmetQuery(start, end, date, atsu, sequence);
            //Assert.IsType<SigmetCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test SigmetsByATSU
        /// </summary>
        [Fact]
        public void SigmetsByATSUTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string atsu = null;
            //var response = instance.SigmetsByATSU(atsu);
            //Assert.IsType<SigmetCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test SigmetsByATSUByDate
        /// </summary>
        [Fact]
        public void SigmetsByATSUByDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string atsu = null;
            //DateTime date = null;
            //var response = instance.SigmetsByATSUByDate(atsu, date);
            //Assert.IsType<SigmetCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test StationObservationLatest
        /// </summary>
        [Fact]
        public void StationObservationLatestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //bool? requireQc = null;
            //var response = instance.StationObservationLatest(stationId, requireQc);
            //Assert.IsType<ObservationGeoJson>(response);
        }

        /// <summary>
        /// Test StationObservationList
        /// </summary>
        [Fact]
        public void StationObservationListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? limit = null;
            //var response = instance.StationObservationList(stationId, start, end, limit);
            //Assert.IsType<ObservationCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test StationObservationTime
        /// </summary>
        [Fact]
        public void StationObservationTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //DateTime time = null;
            //var response = instance.StationObservationTime(stationId, time);
            //Assert.IsType<ObservationGeoJson>(response);
        }

        /// <summary>
        /// Test Taf
        /// </summary>
        [Fact]
        public void TafTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //DateTime date = null;
            //string time = null;
            //var response = instance.Taf(stationId, date, time);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Tafs
        /// </summary>
        [Fact]
        public void TafsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //var response = instance.Tafs(stationId);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Zone
        /// </summary>
        [Fact]
        public void ZoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSZoneType type = null;
            //string zoneId = null;
            //DateTime? effective = null;
            //var response = instance.Zone(type, zoneId, effective);
            //Assert.IsType<ZoneGeoJson>(response);
        }

        /// <summary>
        /// Test ZoneForecast
        /// </summary>
        [Fact]
        public void ZoneForecastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string zoneId = null;
            //var response = instance.ZoneForecast(type, zoneId);
            //Assert.IsType<ZoneForecastGeoJson>(response);
        }

        /// <summary>
        /// Test ZoneList
        /// </summary>
        [Fact]
        public void ZoneListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? id = null;
            //List<AreaCode>? area = null;
            //List<RegionCode>? region = null;
            //List<NWSZoneType>? type = null;
            //string? point = null;
            //bool? includeGeometry = null;
            //int? limit = null;
            //DateTime? effective = null;
            //var response = instance.ZoneList(id, area, region, type, point, includeGeometry, limit, effective);
            //Assert.IsType<ZoneCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test ZoneListType
        /// </summary>
        [Fact]
        public void ZoneListTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NWSZoneType type = null;
            //List<string>? id = null;
            //List<AreaCode>? area = null;
            //List<RegionCode>? region = null;
            //List<NWSZoneType>? type2 = null;
            //string? point = null;
            //bool? includeGeometry = null;
            //int? limit = null;
            //DateTime? effective = null;
            //var response = instance.ZoneListType(type, id, area, region, type2, point, includeGeometry, limit, effective);
            //Assert.IsType<ZoneCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test ZoneObs
        /// </summary>
        [Fact]
        public void ZoneObsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string zoneId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? limit = null;
            //var response = instance.ZoneObs(zoneId, start, end, limit);
            //Assert.IsType<ObservationCollectionGeoJson>(response);
        }

        /// <summary>
        /// Test ZoneStations
        /// </summary>
        [Fact]
        public void ZoneStationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string zoneId = null;
            //int? limit = null;
            //string? cursor = null;
            //var response = instance.ZoneStations(zoneId, limit, cursor);
            //Assert.IsType<ObservationStationCollectionGeoJson>(response);
        }
    }
}
