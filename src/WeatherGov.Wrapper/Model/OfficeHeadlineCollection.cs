/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace WeatherGov.Wrapper.Model
{
    /// <summary>
    /// OfficeHeadlineCollection
    /// </summary>
    [DataContract(Name = "OfficeHeadlineCollection")]
    public partial class OfficeHeadlineCollection : IEquatable<OfficeHeadlineCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfficeHeadlineCollection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfficeHeadlineCollection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfficeHeadlineCollection" /> class.
        /// </summary>
        /// <param name="context">context (required).</param>
        /// <param name="graph">graph (required).</param>
        public OfficeHeadlineCollection(JsonLdContext context = default(JsonLdContext), List<OfficeHeadline> graph = default(List<OfficeHeadline>))
        {
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new ArgumentNullException("context is a required property for OfficeHeadlineCollection and cannot be null");
            }
            this.Context = context;
            // to ensure "graph" is required (not null)
            if (graph == null)
            {
                throw new ArgumentNullException("graph is a required property for OfficeHeadlineCollection and cannot be null");
            }
            this.Graph = graph;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "@context", IsRequired = true, EmitDefaultValue = true)]
        public JsonLdContext Context { get; set; }

        /// <summary>
        /// Gets or Sets Graph
        /// </summary>
        [DataMember(Name = "@graph", IsRequired = true, EmitDefaultValue = true)]
        public List<OfficeHeadline> Graph { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfficeHeadlineCollection {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Graph: ").Append(Graph).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfficeHeadlineCollection);
        }

        /// <summary>
        /// Returns true if OfficeHeadlineCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of OfficeHeadlineCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfficeHeadlineCollection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Graph == input.Graph ||
                    this.Graph != null &&
                    input.Graph != null &&
                    this.Graph.SequenceEqual(input.Graph)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.Graph != null)
                {
                    hashCode = (hashCode * 59) + this.Graph.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
