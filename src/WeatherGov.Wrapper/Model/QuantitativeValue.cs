/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace WeatherGov.Wrapper.Model
{
    /// <summary>
    /// A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue 
    /// </summary>
    [DataContract(Name = "QuantitativeValue")]
    public partial class QuantitativeValue : IEquatable<QuantitativeValue>, IValidatableObject
    {
        /// <summary>
        /// For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml 
        /// </summary>
        /// <value>For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityControlEnum
        {
            /// <summary>
            /// Enum Z for value: Z
            /// </summary>
            [EnumMember(Value = "Z")]
            Z = 1,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 2,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 3,

            /// <summary>
            /// Enum V for value: V
            /// </summary>
            [EnumMember(Value = "V")]
            V = 4,

            /// <summary>
            /// Enum X for value: X
            /// </summary>
            [EnumMember(Value = "X")]
            X = 5,

            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 6,

            /// <summary>
            /// Enum G for value: G
            /// </summary>
            [EnumMember(Value = "G")]
            G = 7,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 8,

            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 9
        }


        /// <summary>
        /// For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml 
        /// </summary>
        /// <value>For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml </value>
        [DataMember(Name = "qualityControl", EmitDefaultValue = false)]
        public QualityControlEnum? QualityControl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantitativeValue" /> class.
        /// </summary>
        /// <param name="value">A measured value.</param>
        /// <param name="maxValue">The maximum value of a range of measured values.</param>
        /// <param name="minValue">The minimum value of a range of measured values.</param>
        /// <param name="unitCode">A string denoting a unit of measure, expressed in the format \&quot;{unit}\&quot; or \&quot;{namespace}:{unit}\&quot;. Units with the namespace \&quot;wmo\&quot; or \&quot;wmoUnit\&quot; are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}. Units with the namespace \&quot;nwsUnit\&quot; are currently custom and do not align to any standard. Units with no namespace or the namespace \&quot;uc\&quot; are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156). Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future. .</param>
        /// <param name="qualityControl">For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml .</param>
        public QuantitativeValue(decimal? value = default(decimal?), decimal maxValue = default(decimal), decimal minValue = default(decimal), string unitCode = default(string), QualityControlEnum? qualityControl = default(QualityControlEnum?))
        {
            this.Value = value;
            this.MaxValue = maxValue;
            this.MinValue = minValue;
            this.UnitCode = unitCode;
            this.QualityControl = qualityControl;
        }

        /// <summary>
        /// A measured value
        /// </summary>
        /// <value>A measured value</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal? Value { get; set; }

        /// <summary>
        /// The maximum value of a range of measured values
        /// </summary>
        /// <value>The maximum value of a range of measured values</value>
        [DataMember(Name = "maxValue", EmitDefaultValue = false)]
        public decimal MaxValue { get; set; }

        /// <summary>
        /// The minimum value of a range of measured values
        /// </summary>
        /// <value>The minimum value of a range of measured values</value>
        [DataMember(Name = "minValue", EmitDefaultValue = false)]
        public decimal MinValue { get; set; }

        /// <summary>
        /// A string denoting a unit of measure, expressed in the format \&quot;{unit}\&quot; or \&quot;{namespace}:{unit}\&quot;. Units with the namespace \&quot;wmo\&quot; or \&quot;wmoUnit\&quot; are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}. Units with the namespace \&quot;nwsUnit\&quot; are currently custom and do not align to any standard. Units with no namespace or the namespace \&quot;uc\&quot; are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156). Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future. 
        /// </summary>
        /// <value>A string denoting a unit of measure, expressed in the format \&quot;{unit}\&quot; or \&quot;{namespace}:{unit}\&quot;. Units with the namespace \&quot;wmo\&quot; or \&quot;wmoUnit\&quot; are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}. Units with the namespace \&quot;nwsUnit\&quot; are currently custom and do not align to any standard. Units with no namespace or the namespace \&quot;uc\&quot; are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156). Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future. </value>
        [DataMember(Name = "unitCode", EmitDefaultValue = false)]
        public string UnitCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuantitativeValue {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("  QualityControl: ").Append(QualityControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuantitativeValue);
        }

        /// <summary>
        /// Returns true if QuantitativeValue instances are equal
        /// </summary>
        /// <param name="input">Instance of QuantitativeValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuantitativeValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    this.MinValue.Equals(input.MinValue)
                ) && 
                (
                    this.UnitCode == input.UnitCode ||
                    (this.UnitCode != null &&
                    this.UnitCode.Equals(input.UnitCode))
                ) && 
                (
                    this.QualityControl == input.QualityControl ||
                    this.QualityControl.Equals(input.QualityControl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                hashCode = (hashCode * 59) + this.MinValue.GetHashCode();
                if (this.UnitCode != null)
                {
                    hashCode = (hashCode * 59) + this.UnitCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QualityControl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.UnitCode != null) {
                // UnitCode (string) pattern
                Regex regexUnitCode = new Regex(@"^((wmo|uc|wmoUnit|nwsUnit):)?.*$", RegexOptions.CultureInvariant);
                if (!regexUnitCode.Match(this.UnitCode).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitCode, must match a pattern of " + regexUnitCode, new [] { "UnitCode" });
                }
            }

            yield break;
        }
    }

}
