/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using GeoJSON.Net.Feature;
using Microsoft.AspNetCore.Mvc;
using WeatherGov.Wrapper.Client;
using WeatherGov.Wrapper.Model;
using System;
using System.Collections.Generic;

namespace WeatherGov.Wrapper.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        FeatureCollection AlertsActive(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<FeatureCollection> AlertsActiveWithHttpInfo(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature AlertsActiveArea(AreaCode area, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> AlertsActiveAreaWithHttpInfo(AreaCode area, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlertsActiveCount200Response</returns>
        AlertsActiveCount200Response AlertsActiveCount(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlertsActiveCount200Response</returns>
        ApiResponse<AlertsActiveCount200Response> AlertsActiveCountWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature AlertsActiveRegion(MarineRegionCode region, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> AlertsActiveRegionWithHttpInfo(MarineRegionCode region, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given NWS public zone or county
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature AlertsActiveZone(string zoneId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given NWS public zone or county
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> AlertsActiveZoneWithHttpInfo(string zoneId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature AlertsQuery(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> AlertsQueryWithHttpInfo(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature AlertsSingle(string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> AlertsSingleWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlertsTypes200Response</returns>
        AlertsTypes200Response AlertsTypes(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlertsTypes200Response</returns>
        ApiResponse<AlertsTypes200Response> AlertsTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature Cwa(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> CwaWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection Cwas(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> CwasWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a Center Weather Service Unit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Office</returns>
        Office Cwsu(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a Center Weather Service Unit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Office</returns>
        ApiResponse<Office> CwsuWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Glossary200Response</returns>
        Glossary200Response Glossary(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Glossary200Response</returns>
        ApiResponse<Glossary200Response> GlossaryWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        ForecastFeature Gridpoint(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<ForecastFeature> GridpointWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        ForecastFeature GridpointForecast(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<ForecastFeature> GridpointForecastWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        ForecastFeature GridpointForecastHourly(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<ForecastFeature> GridpointForecastHourlyWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection GridpointStations(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> GridpointStationsWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        System.IO.Stream Icons(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        ApiResponse<System.IO.Stream> IconsWithHttpInfo(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        System.IO.Stream IconsDualCondition(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        ApiResponse<System.IO.Stream> IconsDualConditionWithHttpInfo(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IconsSummary200Response</returns>
        [Obsolete]
        IconsSummary200Response IconsSummary(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IconsSummary200Response</returns>
        [Obsolete]
        ApiResponse<IconsSummary200Response> IconsSummaryWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductTypeCollection</returns>
        TextProductTypeCollection LocationProducts(string locationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductTypeCollection</returns>
        ApiResponse<TextProductTypeCollection> LocationProductsWithHttpInfo(string locationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature ObsStation(string stationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> ObsStationWithHttpInfo(string stationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection ObsStations(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> ObsStationsWithHttpInfo(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Office</returns>
        Office Office(NWSOfficeId officeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Office</returns>
        ApiResponse<Office> OfficeWithHttpInfo(NWSOfficeId officeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OfficeHeadline</returns>
        OfficeHeadline OfficeHeadline(NWSOfficeId officeId, string headlineId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OfficeHeadline</returns>
        ApiResponse<OfficeHeadline> OfficeHeadlineWithHttpInfo(NWSOfficeId officeId, string headlineId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OfficeHeadlineCollection</returns>
        OfficeHeadlineCollection OfficeHeadlines(NWSOfficeId officeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OfficeHeadlineCollection</returns>
        ApiResponse<OfficeHeadlineCollection> OfficeHeadlinesWithHttpInfo(NWSOfficeId officeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature Point(string point, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> PointWithHttpInfo(string point, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProblemDetails</returns>
        [Obsolete]
        ProblemDetails PointStations(string point, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProblemDetails</returns>
        [Obsolete]
        ApiResponse<ProblemDetails> PointStationsWithHttpInfo(string point, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProduct</returns>
        TextProduct Product(string productId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProduct</returns>
        ApiResponse<TextProduct> ProductWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductLocationCollection</returns>
        TextProductLocationCollection ProductLocations(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductLocationCollection</returns>
        ApiResponse<TextProductLocationCollection> ProductLocationsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductTypeCollection</returns>
        TextProductTypeCollection ProductTypes(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductTypeCollection</returns>
        ApiResponse<TextProductTypeCollection> ProductTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        TextProductCollection ProductsQuery(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        ApiResponse<TextProductCollection> ProductsQueryWithHttpInfo(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        TextProductCollection ProductsType(string typeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        ApiResponse<TextProductCollection> ProductsTypeWithHttpInfo(string typeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        TextProductCollection ProductsTypeLocation(string typeId, string locationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        ApiResponse<TextProductCollection> ProductsTypeLocationWithHttpInfo(string typeId, string locationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductLocationCollection</returns>
        TextProductLocationCollection ProductsTypeLocations(string typeId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductLocationCollection</returns>
        ApiResponse<TextProductLocationCollection> ProductsTypeLocationsWithHttpInfo(string typeId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarProfiler(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarProfilerWithHttpInfo(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarQueue(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarQueueWithHttpInfo(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarServer(string id, string? reportingHost = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarServerWithHttpInfo(string id, string? reportingHost = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarServers(string? reportingHost = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarServersWithHttpInfo(string? reportingHost = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarStation(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarStationWithHttpInfo(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarStationAlarms(string stationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarStationAlarmsWithHttpInfo(string stationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RadarStations(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RadarStationsWithHttpInfo(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        System.IO.Stream SatelliteThumbnails(string area, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        ApiResponse<System.IO.Stream> SatelliteThumbnailsWithHttpInfo(string area, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific SIGMET/AIRMET
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature Sigmet(string atsu, DateTime date, string time, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific SIGMET/AIRMET
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> SigmetWithHttpInfo(string atsu, DateTime date, string time, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection SigmetQuery(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> SigmetQueryWithHttpInfo(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection SigmetsByATSU(string atsu, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> SigmetsByATSUWithHttpInfo(string atsu, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection SigmetsByATSUByDate(string atsu, DateTime date, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> SigmetsByATSUByDateWithHttpInfo(string atsu, DateTime date, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature StationObservationLatest(string stationId, bool? requireQc = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> StationObservationLatestWithHttpInfo(string stationId, bool? requireQc = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection StationObservationList(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> StationObservationListWithHttpInfo(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature StationObservationTime(string stationId, DateTime time, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> StationObservationTimeWithHttpInfo(string stationId, DateTime time, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single Terminal Aerodrome Forecast.
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Taf(string stationId, DateTime date, string time, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single Terminal Aerodrome Forecast.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TafWithHttpInfo(string stationId, DateTime date, string time, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </remarks>
        /// <exception cref="WeatherGov.Wrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object Tafs(string stationId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TafsWithHttpInfo(string stationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature Zone(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> ZoneWithHttpInfo(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        Feature ZoneForecast(string type, string zoneId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> ZoneForecastWithHttpInfo(string type, string zoneId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection ZoneList(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> ZoneListWithHttpInfo(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection ZoneListType(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> ZoneListTypeWithHttpInfo(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection ZoneObs(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> ZoneObsWithHttpInfo(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection ZoneStations(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> ZoneStationsWithHttpInfo(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsActiveAsync(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveWithHttpInfoAsync(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsActiveAreaAsync(AreaCode area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveAreaWithHttpInfoAsync(AreaCode area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlertsActiveCount200Response</returns>
        System.Threading.Tasks.Task<AlertsActiveCount200Response> AlertsActiveCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlertsActiveCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertsActiveCount200Response>> AlertsActiveCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsActiveRegionAsync(MarineRegionCode region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveRegionWithHttpInfoAsync(MarineRegionCode region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given NWS public zone or county
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsActiveZoneAsync(string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given NWS public zone or county
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveZoneWithHttpInfoAsync(string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsQueryAsync(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsQueryWithHttpInfoAsync(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> AlertsSingleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsSingleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlertsTypes200Response</returns>
        System.Threading.Tasks.Task<AlertsTypes200Response> AlertsTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlertsTypes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertsTypes200Response>> AlertsTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> CwaAsync(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> CwaWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> CwasAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Center Weather Advisories from a CWSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> CwasWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a Center Weather Service Unit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Office</returns>
        System.Threading.Tasks.Task<Office> CwsuAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a Center Weather Service Unit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Office)</returns>
        System.Threading.Tasks.Task<ApiResponse<Office>> CwsuWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Glossary200Response</returns>
        System.Threading.Tasks.Task<Glossary200Response> GlossaryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Glossary200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Glossary200Response>> GlossaryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<ForecastFeature> GridpointAsync(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<ForecastFeature> GridpointForecastAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointForecastWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<ForecastFeature> GridpointForecastHourlyAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointForecastHourlyWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> GridpointStationsAsync(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> GridpointStationsWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        System.Threading.Tasks.Task<System.IO.Stream> IconsAsync(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IconsWithHttpInfoAsync(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        System.Threading.Tasks.Task<System.IO.Stream> IconsDualConditionAsync(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IconsDualConditionWithHttpInfoAsync(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IconsSummary200Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<IconsSummary200Response> IconsSummaryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IconsSummary200Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<IconsSummary200Response>> IconsSummaryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductTypeCollection</returns>
        System.Threading.Tasks.Task<TextProductTypeCollection> LocationProductsAsync(string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductTypeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductTypeCollection>> LocationProductsWithHttpInfoAsync(string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> ObsStationAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> ObsStationWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> ObsStationsAsync(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ObsStationsWithHttpInfoAsync(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Office</returns>
        System.Threading.Tasks.Task<Office> OfficeAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Office)</returns>
        System.Threading.Tasks.Task<ApiResponse<Office>> OfficeWithHttpInfoAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfficeHeadline</returns>
        System.Threading.Tasks.Task<OfficeHeadline> OfficeHeadlineAsync(NWSOfficeId officeId, string headlineId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfficeHeadline)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfficeHeadline>> OfficeHeadlineWithHttpInfoAsync(NWSOfficeId officeId, string headlineId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfficeHeadlineCollection</returns>
        System.Threading.Tasks.Task<OfficeHeadlineCollection> OfficeHeadlinesAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfficeHeadlineCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfficeHeadlineCollection>> OfficeHeadlinesWithHttpInfoAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> PointAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> PointWithHttpInfoAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProblemDetails</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ProblemDetails> PointStationsAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProblemDetails)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ProblemDetails>> PointStationsWithHttpInfoAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProduct</returns>
        System.Threading.Tasks.Task<TextProduct> ProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProduct>> ProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductLocationCollection</returns>
        System.Threading.Tasks.Task<TextProductLocationCollection> ProductLocationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductLocationCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductLocationCollection>> ProductLocationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductTypeCollection</returns>
        System.Threading.Tasks.Task<TextProductTypeCollection> ProductTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductTypeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductTypeCollection>> ProductTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        System.Threading.Tasks.Task<TextProductCollection> ProductsQueryAsync(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsQueryWithHttpInfoAsync(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        System.Threading.Tasks.Task<TextProductCollection> ProductsTypeAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsTypeWithHttpInfoAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        System.Threading.Tasks.Task<TextProductCollection> ProductsTypeLocationAsync(string typeId, string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsTypeLocationWithHttpInfoAsync(string typeId, string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductLocationCollection</returns>
        System.Threading.Tasks.Task<TextProductLocationCollection> ProductsTypeLocationsAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductLocationCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextProductLocationCollection>> ProductsTypeLocationsWithHttpInfoAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarProfilerAsync(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarProfilerWithHttpInfoAsync(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarQueueAsync(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarQueueWithHttpInfoAsync(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarServerAsync(string id, string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarServerWithHttpInfoAsync(string id, string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarServersAsync(string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarServersWithHttpInfoAsync(string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarStationAsync(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationWithHttpInfoAsync(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarStationAlarmsAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationAlarmsWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RadarStationsAsync(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsWithHttpInfoAsync(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        System.Threading.Tasks.Task<System.IO.Stream> SatelliteThumbnailsAsync(string area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> SatelliteThumbnailsWithHttpInfoAsync(string area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific SIGMET/AIRMET
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> SigmetAsync(string atsu, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific SIGMET/AIRMET
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> SigmetWithHttpInfoAsync(string atsu, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> SigmetQueryAsync(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetQueryWithHttpInfoAsync(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> SigmetsByATSUAsync(string atsu, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetsByATSUWithHttpInfoAsync(string atsu, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> SigmetsByATSUByDateAsync(string atsu, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetsByATSUByDateWithHttpInfoAsync(string atsu, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> StationObservationLatestAsync(string stationId, bool? requireQc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> StationObservationLatestWithHttpInfoAsync(string stationId, bool? requireQc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> StationObservationListAsync(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> StationObservationListWithHttpInfoAsync(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> StationObservationTimeAsync(string stationId, DateTime time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> StationObservationTimeWithHttpInfoAsync(string stationId, DateTime time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single Terminal Aerodrome Forecast.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TafAsync(string stationId, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single Terminal Aerodrome Forecast.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TafWithHttpInfoAsync(string stationId, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TafsAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TafsWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> ZoneAsync(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> ZoneWithHttpInfoAsync(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> ZoneForecastAsync(string type, string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> ZoneForecastWithHttpInfoAsync(string type, string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> ZoneListAsync(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneListWithHttpInfoAsync(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> ZoneListTypeAsync(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneListTypeWithHttpInfoAsync(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> ZoneObsAsync(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneObsWithHttpInfoAsync(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> ZoneStationsAsync(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneStationsWithHttpInfoAsync(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Wrapper.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Wrapper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Wrapper.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Wrapper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Wrapper.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public FeatureCollection AlertsActive(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = AlertsActiveWithHttpInfo(status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<FeatureCollection> AlertsActiveWithHttpInfo(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "message_type", messageType));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "event", varEvent));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "code", code));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (regionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "region_type", regionType));
            }
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "zone", zone));
            }
            if (urgency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "urgency", urgency));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "severity", severity));
            }
            if (certainty != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "certainty", certainty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.AlertsActive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/alerts/active", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsActiveAsync(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsActiveWithHttpInfoAsync(status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveWithHttpInfoAsync(List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "message_type", messageType));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "event", varEvent));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "code", code));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (regionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "region_type", regionType));
            }
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "zone", zone));
            }
            if (urgency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "urgency", urgency));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "severity", severity));
            }
            if (certainty != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "certainty", certainty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.AlertsActive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts/active", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature AlertsActiveArea(AreaCode area, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = AlertsActiveAreaWithHttpInfo(area);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> AlertsActiveAreaWithHttpInfo(AreaCode area, int operationIndex = 0)
        {
            // verify the required parameter 'area' is set
            if (area == null)
            {
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->AlertsActiveArea");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("area", ClientUtils.ParameterToString(area)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveArea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/alerts/active/area/{area}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveArea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsActiveAreaAsync(AreaCode area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsActiveAreaWithHttpInfoAsync(area, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">State/area ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveAreaWithHttpInfoAsync(AreaCode area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'area' is set
            if (area == null)
            {
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->AlertsActiveArea");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("area", ClientUtils.ParameterToString(area)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveArea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts/active/area/{area}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveArea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlertsActiveCount200Response</returns>
        public AlertsActiveCount200Response AlertsActiveCount(int operationIndex = 0)
        {
            ApiResponse<AlertsActiveCount200Response> localVarResponse = AlertsActiveCountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlertsActiveCount200Response</returns>
        public ApiResponse<AlertsActiveCount200Response> AlertsActiveCountWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlertsActiveCount200Response>("/alerts/active/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlertsActiveCount200Response</returns>
        public async System.Threading.Tasks.Task<AlertsActiveCount200Response> AlertsActiveCountAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AlertsActiveCount200Response> localVarResponse = await AlertsActiveCountWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlertsActiveCount200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertsActiveCount200Response>> AlertsActiveCountWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlertsActiveCount200Response>("/alerts/active/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature AlertsActiveRegion(MarineRegionCode region, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = AlertsActiveRegionWithHttpInfo(region);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> AlertsActiveRegionWithHttpInfo(MarineRegionCode region, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("region", ClientUtils.ParameterToString(region)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveRegion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/alerts/active/region/{region}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveRegion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsActiveRegionAsync(MarineRegionCode region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsActiveRegionWithHttpInfoAsync(region, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Marine region ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveRegionWithHttpInfoAsync(MarineRegionCode region, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("region", ClientUtils.ParameterToString(region)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveRegion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts/active/region/{region}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveRegion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given NWS public zone or county
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature AlertsActiveZone(string zoneId, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = AlertsActiveZoneWithHttpInfo(zoneId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given NWS public zone or county
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> AlertsActiveZoneWithHttpInfo(string zoneId, int operationIndex = 0)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->AlertsActiveZone");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/alerts/active/zone/{zoneId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns active alerts for the given NWS public zone or county
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsActiveZoneAsync(string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsActiveZoneWithHttpInfoAsync(zoneId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns active alerts for the given NWS public zone or county
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsActiveZoneWithHttpInfoAsync(string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->AlertsActiveZone");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsActiveZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts/active/zone/{zoneId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsActiveZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature AlertsQuery(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = AlertsQueryWithHttpInfo(active, start, end, status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> AlertsQueryWithHttpInfo(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "message_type", messageType));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "event", varEvent));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "code", code));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (regionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "region_type", regionType));
            }
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "zone", zone));
            }
            if (urgency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "urgency", urgency));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "severity", severity));
            }
            if (certainty != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "certainty", certainty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.AlertsQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/alerts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsQueryAsync(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsQueryWithHttpInfoAsync(active, start, end, status, messageType, varEvent, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">List only active alerts (use /alerts/active endpoints instead) (optional) (deprecated)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="varEvent">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="area">State/territory code or marine area code This parameter is incompatible with the following parameters: point, region, region_type, zone  (optional)</param>
        /// <param name="point">Point (latitude,longitude) This parameter is incompatible with the following parameters: area, region, region_type, zone  (optional)</param>
        /// <param name="region">Marine region code This parameter is incompatible with the following parameters: area, point, region_type, zone  (optional)</param>
        /// <param name="regionType">Region type (land or marine) This parameter is incompatible with the following parameters: area, point, region, zone  (optional)</param>
        /// <param name="zone">Zone ID (forecast or county) This parameter is incompatible with the following parameters: area, point, region, region_type  (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsQueryWithHttpInfoAsync(bool? active = default(bool?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? status = default(List<string>?), List<string>? messageType = default(List<string>?), List<string>? varEvent = default(List<string>?), List<string>? code = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), string? point = default(string?), List<MarineRegionCode>? region = default(List<MarineRegionCode>?), string? regionType = default(string?), List<string>? zone = default(List<string>?), List<AlertUrgency>? urgency = default(List<AlertUrgency>?), List<AlertSeverity>? severity = default(List<AlertSeverity>?), List<AlertCertainty>? certainty = default(List<AlertCertainty>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "active", active));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "status", status));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "message_type", messageType));
            }
            if (varEvent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "event", varEvent));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "code", code));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (regionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "region_type", regionType));
            }
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "zone", zone));
            }
            if (urgency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "urgency", urgency));
            }
            if (severity != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "severity", severity));
            }
            if (certainty != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "certainty", certainty));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.AlertsQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature AlertsSingle(string id, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = AlertsSingleWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> AlertsSingleWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AlertsSingle");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/cap+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsSingle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/alerts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> AlertsSingleAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await AlertsSingleWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Alert identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> AlertsSingleWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AlertsSingle");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/cap+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AlertsSingle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/alerts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsSingle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlertsTypes200Response</returns>
        public AlertsTypes200Response AlertsTypes(int operationIndex = 0)
        {
            ApiResponse<AlertsTypes200Response> localVarResponse = AlertsTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlertsTypes200Response</returns>
        public ApiResponse<AlertsTypes200Response> AlertsTypesWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AlertsTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AlertsTypes200Response>("/alerts/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlertsTypes200Response</returns>
        public async System.Threading.Tasks.Task<AlertsTypes200Response> AlertsTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AlertsTypes200Response> localVarResponse = await AlertsTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlertsTypes200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertsTypes200Response>> AlertsTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.AlertsTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlertsTypes200Response>("/alerts/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature Cwa(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = CwaWithHttpInfo(cwsuId, date, sequence);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> CwaWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0)
        {
            
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/vnd.noaa.uswx+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence", ClientUtils.ParameterToString(sequence)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwa";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> CwaAsync(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await CwaWithHttpInfoAsync(cwsuId, date, sequence, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="sequence">Sequence number</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> CwaWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, DateTime date, int sequence, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/vnd.noaa.uswx+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence", ClientUtils.ParameterToString(sequence)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwa";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection Cwas(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = CwasWithHttpInfo(cwsuId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> CwasWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/aviation/cwsus/{cwsuId}/cwas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> CwasAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await CwasWithHttpInfoAsync(cwsuId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Center Weather Advisories from a CWSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> CwasWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/aviation/cwsus/{cwsuId}/cwas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a Center Weather Service Unit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Office</returns>
        public Office Cwsu(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0)
        {
            ApiResponse<Office> localVarResponse = CwsuWithHttpInfo(cwsuId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a Center Weather Service Unit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Office</returns>
        public ApiResponse<Office> CwsuWithHttpInfo(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwsu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Office>("/aviation/cwsus/{cwsuId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwsu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a Center Weather Service Unit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Office</returns>
        public async System.Threading.Tasks.Task<Office> CwsuAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Office> localVarResponse = await CwsuWithHttpInfoAsync(cwsuId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a Center Weather Service Unit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cwsuId">NWS CWSU ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Office)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Office>> CwsuWithHttpInfoAsync(NWSCenterWeatherServiceUnitId cwsuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cwsuId", ClientUtils.ParameterToString(cwsuId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Cwsu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Office>("/aviation/cwsus/{cwsuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cwsu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Glossary200Response</returns>
        public Glossary200Response Glossary(int operationIndex = 0)
        {
            ApiResponse<Glossary200Response> localVarResponse = GlossaryWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Glossary200Response</returns>
        public ApiResponse<Glossary200Response> GlossaryWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.Glossary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Glossary200Response>("/glossary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Glossary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Glossary200Response</returns>
        public async System.Threading.Tasks.Task<Glossary200Response> GlossaryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Glossary200Response> localVarResponse = await GlossaryWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Glossary200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Glossary200Response>> GlossaryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.Glossary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Glossary200Response>("/glossary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Glossary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public ForecastFeature Gridpoint(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0)
        {
            ApiResponse<ForecastFeature> localVarResponse = GridpointWithHttpInfo(wfo, x, y);
            return ForecastFeature.FromFeature(localVarResponse.Data);
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<ForecastFeature> GridpointWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Gridpoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/gridpoints/{wfo}/{x},{y}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gridpoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<ForecastFeature> GridpointAsync(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ForecastFeature> localVarResponse = await GridpointWithHttpInfoAsync(wfo, x, y, operationIndex, cancellationToken).ConfigureAwait(false);
            return ForecastFeature.FromFeature(localVarResponse.Data);
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Gridpoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/gridpoints/{wfo}/{x},{y}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Gridpoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public ForecastFeature GridpointForecast(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0)
        {
            ApiResponse<ForecastFeature> localVarResponse = GridpointForecastWithHttpInfo(wfo, x, y, featureFlags, units);
            
            return ForecastFeature.FromFeature(localVarResponse.Data);
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<ForecastFeature> GridpointForecastWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (featureFlags != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Feature-Flags", ClientUtils.ParameterToString(featureFlags)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointForecast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/gridpoints/{wfo}/{x},{y}/forecast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<ForecastFeature> GridpointForecastAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ForecastFeature> localVarResponse = await GridpointForecastWithHttpInfoAsync(wfo, x, y, featureFlags, units, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointForecastWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (featureFlags != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Feature-Flags", ClientUtils.ParameterToString(featureFlags)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointForecast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/gridpoints/{wfo}/{x},{y}/forecast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public ForecastFeature GridpointForecastHourly(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0)
        {
            ApiResponse<ForecastFeature> localVarResponse = GridpointForecastHourlyWithHttpInfo(wfo, x, y, featureFlags, units);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<ForecastFeature> GridpointForecastHourlyWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (featureFlags != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Feature-Flags", ClientUtils.ParameterToString(featureFlags)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointForecastHourly";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/gridpoints/{wfo}/{x},{y}/forecast/hourly", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointForecastHourly", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<ForecastFeature> GridpointForecastHourlyAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ForecastFeature> localVarResponse = await GridpointForecastHourlyWithHttpInfoAsync(wfo, x, y, featureFlags, units, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue  (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForecastFeature>> GridpointForecastHourlyWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, List<string>? featureFlags = default(List<string>?), GridpointForecastUnits? units = default(GridpointForecastUnits?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (units != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "units", units));
            }
            if (featureFlags != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Feature-Flags", ClientUtils.ParameterToString(featureFlags)); // header parameter
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointForecastHourly";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/gridpoints/{wfo}/{x},{y}/forecast/hourly", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointForecastHourly", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return new ApiResponse<ForecastFeature>(localVarResponse.StatusCode, ForecastFeature.FromFeature(localVarResponse.Data));
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection GridpointStations(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = GridpointStationsWithHttpInfo(wfo, x, y, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> GridpointStationsWithHttpInfo(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/gridpoints/{wfo}/{x},{y}/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> GridpointStationsAsync(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await GridpointStationsWithHttpInfoAsync(wfo, x, y, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo">Forecast office ID</param>
        /// <param name="x">Forecast grid X coordinate</param>
        /// <param name="y">Forecast grid Y coordinate</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> GridpointStationsWithHttpInfoAsync(NWSForecastOfficeId wfo, int x, int y, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("wfo", ClientUtils.ParameterToString(wfo)); // path parameter
            localVarRequestOptions.PathParameters.Add("x", ClientUtils.ParameterToString(x)); // path parameter
            localVarRequestOptions.PathParameters.Add("y", ClientUtils.ParameterToString(y)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.GridpointStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/gridpoints/{wfo}/{x},{y}/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GridpointStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        public System.IO.Stream Icons(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0)
        {
            ApiResponse<System.IO.Stream> localVarResponse = IconsWithHttpInfo(set, timeOfDay, first, size, fontsize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        public ApiResponse<System.IO.Stream> IconsWithHttpInfo(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->Icons");
            }

            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->Icons");
            }

            // verify the required parameter 'first' is set
            if (first == null)
            {
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->Icons");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeOfDay", ClientUtils.ParameterToString(timeOfDay)); // path parameter
            localVarRequestOptions.PathParameters.Add("first", ClientUtils.ParameterToString(first)); // path parameter
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (fontsize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fontsize", fontsize));
            }

            localVarRequestOptions.Operation = "DefaultApi.Icons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/icons/{set}/{timeOfDay}/{first}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Icons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<System.IO.Stream> IconsAsync(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<System.IO.Stream> localVarResponse = await IconsWithHttpInfoAsync(set, timeOfDay, first, size, fontsize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IconsWithHttpInfoAsync(string set, string timeOfDay, string first, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->Icons");
            }

            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->Icons");
            }

            // verify the required parameter 'first' is set
            if (first == null)
            {
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->Icons");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeOfDay", ClientUtils.ParameterToString(timeOfDay)); // path parameter
            localVarRequestOptions.PathParameters.Add("first", ClientUtils.ParameterToString(first)); // path parameter
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (fontsize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fontsize", fontsize));
            }

            localVarRequestOptions.Operation = "DefaultApi.Icons";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/icons/{set}/{timeOfDay}/{first}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Icons", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        public System.IO.Stream IconsDualCondition(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0)
        {
            ApiResponse<System.IO.Stream> localVarResponse = IconsDualConditionWithHttpInfo(set, timeOfDay, first, second, size, fontsize);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        public ApiResponse<System.IO.Stream> IconsDualConditionWithHttpInfo(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'first' is set
            if (first == null)
            {
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'second' is set
            if (second == null)
            {
                throw new ApiException(400, "Missing required parameter 'second' when calling DefaultApi->IconsDualCondition");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeOfDay", ClientUtils.ParameterToString(timeOfDay)); // path parameter
            localVarRequestOptions.PathParameters.Add("first", ClientUtils.ParameterToString(first)); // path parameter
            localVarRequestOptions.PathParameters.Add("second", ClientUtils.ParameterToString(second)); // path parameter
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (fontsize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fontsize", fontsize));
            }

            localVarRequestOptions.Operation = "DefaultApi.IconsDualCondition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/icons/{set}/{timeOfDay}/{first}/{second}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IconsDualCondition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<System.IO.Stream> IconsDualConditionAsync(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<System.IO.Stream> localVarResponse = await IconsDualConditionWithHttpInfoAsync(set, timeOfDay, first, second, size, fontsize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a forecast icon. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="set">.</param>
        /// <param name="timeOfDay">.</param>
        /// <param name="first">.</param>
        /// <param name="second">.</param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IconsDualConditionWithHttpInfoAsync(string set, string timeOfDay, string first, string second, IconsSizeParameter? size = default(IconsSizeParameter?), int? fontsize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'set' is set
            if (set == null)
            {
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'first' is set
            if (first == null)
            {
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->IconsDualCondition");
            }

            // verify the required parameter 'second' is set
            if (second == null)
            {
                throw new ApiException(400, "Missing required parameter 'second' when calling DefaultApi->IconsDualCondition");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("set", ClientUtils.ParameterToString(set)); // path parameter
            localVarRequestOptions.PathParameters.Add("timeOfDay", ClientUtils.ParameterToString(timeOfDay)); // path parameter
            localVarRequestOptions.PathParameters.Add("first", ClientUtils.ParameterToString(first)); // path parameter
            localVarRequestOptions.PathParameters.Add("second", ClientUtils.ParameterToString(second)); // path parameter
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (fontsize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fontsize", fontsize));
            }

            localVarRequestOptions.Operation = "DefaultApi.IconsDualCondition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/icons/{set}/{timeOfDay}/{first}/{second}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IconsDualCondition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IconsSummary200Response</returns>
        [Obsolete]
        public IconsSummary200Response IconsSummary(int operationIndex = 0)
        {
            ApiResponse<IconsSummary200Response> localVarResponse = IconsSummaryWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IconsSummary200Response</returns>
        [Obsolete]
        public ApiResponse<IconsSummary200Response> IconsSummaryWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.IconsSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IconsSummary200Response>("/icons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IconsSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IconsSummary200Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<IconsSummary200Response> IconsSummaryAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<IconsSummary200Response> localVarResponse = await IconsSummaryWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IconsSummary200Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<IconsSummary200Response>> IconsSummaryWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.IconsSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IconsSummary200Response>("/icons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IconsSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductTypeCollection</returns>
        public TextProductTypeCollection LocationProducts(string locationId, int operationIndex = 0)
        {
            ApiResponse<TextProductTypeCollection> localVarResponse = LocationProductsWithHttpInfo(locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductTypeCollection</returns>
        public ApiResponse<TextProductTypeCollection> LocationProductsWithHttpInfo(string locationId, int operationIndex = 0)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->LocationProducts");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.LocationProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductTypeCollection>("/products/locations/{locationId}/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductTypeCollection</returns>
        public async System.Threading.Tasks.Task<TextProductTypeCollection> LocationProductsAsync(string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductTypeCollection> localVarResponse = await LocationProductsWithHttpInfoAsync(locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductTypeCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductTypeCollection>> LocationProductsWithHttpInfoAsync(string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->LocationProducts");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("locationId", ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.LocationProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductTypeCollection>("/products/locations/{locationId}/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LocationProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature ObsStation(string stationId, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = ObsStationWithHttpInfo(stationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> ObsStationWithHttpInfo(string stationId, int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->ObsStation");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ObsStation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/stations/{stationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ObsStation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> ObsStationAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await ObsStationWithHttpInfoAsync(stationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> ObsStationWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->ObsStation");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ObsStation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/stations/{stationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ObsStation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection ObsStations(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = ObsStationsWithHttpInfo(id, state, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> ObsStationsWithHttpInfo(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "state", state));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.ObsStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ObsStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> ObsStationsAsync(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await ObsStationsWithHttpInfoAsync(id, state, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Filter by observation station ID (optional)</param>
        /// <param name="state">Filter by state/marine area code (optional)</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ObsStationsWithHttpInfoAsync(List<string>? id = default(List<string>?), List<AreaCode>? state = default(List<AreaCode>?), int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "state", state));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.ObsStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ObsStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Office</returns>
        public Office Office(NWSOfficeId officeId, int operationIndex = 0)
        {
            ApiResponse<Office> localVarResponse = OfficeWithHttpInfo(officeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Office</returns>
        public ApiResponse<Office> OfficeWithHttpInfo(NWSOfficeId officeId, int operationIndex = 0)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->Office");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Office";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Office>("/offices/{officeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Office", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Office</returns>
        public async System.Threading.Tasks.Task<Office> OfficeAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Office> localVarResponse = await OfficeWithHttpInfoAsync(officeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Office)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Office>> OfficeWithHttpInfoAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->Office");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Office";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Office>("/offices/{officeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Office", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OfficeHeadline</returns>
        public OfficeHeadline OfficeHeadline(NWSOfficeId officeId, string headlineId, int operationIndex = 0)
        {
            ApiResponse<OfficeHeadline> localVarResponse = OfficeHeadlineWithHttpInfo(officeId, headlineId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OfficeHeadline</returns>
        public ApiResponse<OfficeHeadline> OfficeHeadlineWithHttpInfo(NWSOfficeId officeId, string headlineId, int operationIndex = 0)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficeHeadline");
            }

            // verify the required parameter 'headlineId' is set
            if (headlineId == null)
            {
                throw new ApiException(400, "Missing required parameter 'headlineId' when calling DefaultApi->OfficeHeadline");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("headlineId", ClientUtils.ParameterToString(headlineId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.OfficeHeadline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OfficeHeadline>("/offices/{officeId}/headlines/{headlineId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfficeHeadline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfficeHeadline</returns>
        public async System.Threading.Tasks.Task<OfficeHeadline> OfficeHeadlineAsync(NWSOfficeId officeId, string headlineId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<OfficeHeadline> localVarResponse = await OfficeHeadlineWithHttpInfoAsync(officeId, headlineId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="headlineId">Headline record ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfficeHeadline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OfficeHeadline>> OfficeHeadlineWithHttpInfoAsync(NWSOfficeId officeId, string headlineId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficeHeadline");
            }

            // verify the required parameter 'headlineId' is set
            if (headlineId == null)
            {
                throw new ApiException(400, "Missing required parameter 'headlineId' when calling DefaultApi->OfficeHeadline");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("headlineId", ClientUtils.ParameterToString(headlineId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.OfficeHeadline";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OfficeHeadline>("/offices/{officeId}/headlines/{headlineId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfficeHeadline", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OfficeHeadlineCollection</returns>
        public OfficeHeadlineCollection OfficeHeadlines(NWSOfficeId officeId, int operationIndex = 0)
        {
            ApiResponse<OfficeHeadlineCollection> localVarResponse = OfficeHeadlinesWithHttpInfo(officeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OfficeHeadlineCollection</returns>
        public ApiResponse<OfficeHeadlineCollection> OfficeHeadlinesWithHttpInfo(NWSOfficeId officeId, int operationIndex = 0)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficeHeadlines");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.OfficeHeadlines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OfficeHeadlineCollection>("/offices/{officeId}/headlines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfficeHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfficeHeadlineCollection</returns>
        public async System.Threading.Tasks.Task<OfficeHeadlineCollection> OfficeHeadlinesAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<OfficeHeadlineCollection> localVarResponse = await OfficeHeadlinesWithHttpInfoAsync(officeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId">NWS office ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfficeHeadlineCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OfficeHeadlineCollection>> OfficeHeadlinesWithHttpInfoAsync(NWSOfficeId officeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficeHeadlines");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("officeId", ClientUtils.ParameterToString(officeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.OfficeHeadlines";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OfficeHeadlineCollection>("/offices/{officeId}/headlines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OfficeHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature Point(string point, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = PointWithHttpInfo(point);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> PointWithHttpInfo(string point, int operationIndex = 0)
        {
            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->Point");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("point", ClientUtils.ParameterToString(point)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Point";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/points/{point}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Point", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> PointAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await PointWithHttpInfoAsync(point, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> PointWithHttpInfoAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->Point");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("point", ClientUtils.ParameterToString(point)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Point";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/points/{point}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Point", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProblemDetails</returns>
        [Obsolete]
        public ProblemDetails PointStations(string point, int operationIndex = 0)
        {
            ApiResponse<ProblemDetails> localVarResponse = PointStationsWithHttpInfo(point);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProblemDetails</returns>
        [Obsolete]
        public ApiResponse<ProblemDetails> PointStationsWithHttpInfo(string point, int operationIndex = 0)
        {
            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointStations");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("point", ClientUtils.ParameterToString(point)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PointStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProblemDetails>("/points/{point}/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PointStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProblemDetails</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ProblemDetails> PointStationsAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ProblemDetails> localVarResponse = await PointStationsWithHttpInfoAsync(point, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="point">Point (latitude, longitude)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProblemDetails)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<ProblemDetails>> PointStationsWithHttpInfoAsync(string point, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointStations");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("point", ClientUtils.ParameterToString(point)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PointStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProblemDetails>("/points/{point}/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PointStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProduct</returns>
        public TextProduct Product(string productId, int operationIndex = 0)
        {
            ApiResponse<TextProduct> localVarResponse = ProductWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProduct</returns>
        public ApiResponse<TextProduct> ProductWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new ApiException(400, "Missing required parameter 'productId' when calling DefaultApi->Product");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Product";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProduct>("/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Product", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProduct</returns>
        public async System.Threading.Tasks.Task<TextProduct> ProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProduct> localVarResponse = await ProductWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProduct>> ProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new ApiException(400, "Missing required parameter 'productId' when calling DefaultApi->Product");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Product";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProduct>("/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Product", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductLocationCollection</returns>
        public TextProductLocationCollection ProductLocations(int operationIndex = 0)
        {
            ApiResponse<TextProductLocationCollection> localVarResponse = ProductLocationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductLocationCollection</returns>
        public ApiResponse<TextProductLocationCollection> ProductLocationsWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ProductLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductLocationCollection>("/products/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductLocationCollection</returns>
        public async System.Threading.Tasks.Task<TextProductLocationCollection> ProductLocationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductLocationCollection> localVarResponse = await ProductLocationsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductLocationCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductLocationCollection>> ProductLocationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ProductLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductLocationCollection>("/products/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductTypeCollection</returns>
        public TextProductTypeCollection ProductTypes(int operationIndex = 0)
        {
            ApiResponse<TextProductTypeCollection> localVarResponse = ProductTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductTypeCollection</returns>
        public ApiResponse<TextProductTypeCollection> ProductTypesWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ProductTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductTypeCollection>("/products/types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductTypeCollection</returns>
        public async System.Threading.Tasks.Task<TextProductTypeCollection> ProductTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductTypeCollection> localVarResponse = await ProductTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductTypeCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductTypeCollection>> ProductTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.ProductTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductTypeCollection>("/products/types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        public TextProductCollection ProductsQuery(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<TextProductCollection> localVarResponse = ProductsQueryWithHttpInfo(location, start, end, office, wmoid, type, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        public ApiResponse<TextProductCollection> ProductsQueryWithHttpInfo(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "location", location));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (office != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "office", office));
            }
            if (wmoid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "wmoid", wmoid));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.ProductsQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductCollection>("/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        public async System.Threading.Tasks.Task<TextProductCollection> ProductsQueryAsync(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductCollection> localVarResponse = await ProductsQueryWithHttpInfoAsync(location, start, end, office, wmoid, type, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsQueryWithHttpInfoAsync(List<string>? location = default(List<string>?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string>? office = default(List<string>?), List<string>? wmoid = default(List<string>?), List<string>? type = default(List<string>?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "location", location));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (office != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "office", office));
            }
            if (wmoid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "wmoid", wmoid));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.ProductsQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductCollection>("/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        public TextProductCollection ProductsType(string typeId, int operationIndex = 0)
        {
            ApiResponse<TextProductCollection> localVarResponse = ProductsTypeWithHttpInfo(typeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        public ApiResponse<TextProductCollection> ProductsTypeWithHttpInfo(string typeId, int operationIndex = 0)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsType");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductCollection>("/products/types/{typeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        public async System.Threading.Tasks.Task<TextProductCollection> ProductsTypeAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductCollection> localVarResponse = await ProductsTypeWithHttpInfoAsync(typeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsTypeWithHttpInfoAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsType");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductCollection>("/products/types/{typeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductCollection</returns>
        public TextProductCollection ProductsTypeLocation(string typeId, string locationId, int operationIndex = 0)
        {
            ApiResponse<TextProductCollection> localVarResponse = ProductsTypeLocationWithHttpInfo(typeId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductCollection</returns>
        public ApiResponse<TextProductCollection> ProductsTypeLocationWithHttpInfo(string typeId, string locationId, int operationIndex = 0)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypeLocation");
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsTypeLocation");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsTypeLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductCollection>("/products/types/{typeId}/locations/{locationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsTypeLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductCollection</returns>
        public async System.Threading.Tasks.Task<TextProductCollection> ProductsTypeLocationAsync(string typeId, string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductCollection> localVarResponse = await ProductsTypeLocationWithHttpInfoAsync(typeId, locationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="locationId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductCollection>> ProductsTypeLocationWithHttpInfoAsync(string typeId, string locationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypeLocation");
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsTypeLocation");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter
            localVarRequestOptions.PathParameters.Add("locationId", ClientUtils.ParameterToString(locationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsTypeLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductCollection>("/products/types/{typeId}/locations/{locationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsTypeLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextProductLocationCollection</returns>
        public TextProductLocationCollection ProductsTypeLocations(string typeId, int operationIndex = 0)
        {
            ApiResponse<TextProductLocationCollection> localVarResponse = ProductsTypeLocationsWithHttpInfo(typeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextProductLocationCollection</returns>
        public ApiResponse<TextProductLocationCollection> ProductsTypeLocationsWithHttpInfo(string typeId, int operationIndex = 0)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypeLocations");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsTypeLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextProductLocationCollection>("/products/types/{typeId}/locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsTypeLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextProductLocationCollection</returns>
        public async System.Threading.Tasks.Task<TextProductLocationCollection> ProductsTypeLocationsAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TextProductLocationCollection> localVarResponse = await ProductsTypeLocationsWithHttpInfoAsync(typeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextProductLocationCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TextProductLocationCollection>> ProductsTypeLocationsWithHttpInfoAsync(string typeId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
            {
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypeLocations");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("typeId", ClientUtils.ParameterToString(typeId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ProductsTypeLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextProductLocationCollection>("/products/types/{typeId}/locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductsTypeLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarProfiler(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarProfilerWithHttpInfo(stationId, time, interval);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarProfilerWithHttpInfo(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarProfiler");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (time != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "time", time));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarProfiler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/profilers/{stationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarProfiler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarProfilerAsync(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarProfilerWithHttpInfoAsync(stationId, time, interval, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Profiler station ID</param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarProfilerWithHttpInfoAsync(string stationId, ISO8601Interval? time = default(ISO8601Interval?), string? interval = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarProfiler");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (time != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "time", time));
            }
            if (interval != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "interval", interval));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarProfiler";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/profilers/{stationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarProfiler", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarQueue(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarQueueWithHttpInfo(host, limit, arrived, created, published, station, type, feed, resolution);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarQueueWithHttpInfo(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'host' is set
            if (host == null)
            {
                throw new ApiException(400, "Missing required parameter 'host' when calling DefaultApi->RadarQueue");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("host", ClientUtils.ParameterToString(host)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (arrived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "arrived", arrived));
            }
            if (created != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created", created));
            }
            if (published != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "published", published));
            }
            if (station != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "station", station));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (feed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "feed", feed));
            }
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarQueue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/queues/{host}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarQueueAsync(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarQueueWithHttpInfoAsync(host, limit, arrived, created, published, station, type, feed, resolution, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">LDM host</param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarQueueWithHttpInfoAsync(string host, int? limit = default(int?), ISO8601Interval? arrived = default(ISO8601Interval?), ISO8601Interval? created = default(ISO8601Interval?), ISO8601Interval? published = default(ISO8601Interval?), string? station = default(string?), string? type = default(string?), string? feed = default(string?), int? resolution = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'host' is set
            if (host == null)
            {
                throw new ApiException(400, "Missing required parameter 'host' when calling DefaultApi->RadarQueue");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("host", ClientUtils.ParameterToString(host)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (arrived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "arrived", arrived));
            }
            if (created != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created", created));
            }
            if (published != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "published", published));
            }
            if (station != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "station", station));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (feed != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "feed", feed));
            }
            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarQueue";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/queues/{host}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarQueue", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarServer(string id, string? reportingHost = default(string?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarServerWithHttpInfo(id, reportingHost);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarServerWithHttpInfo(string id, string? reportingHost = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->RadarServer");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/servers/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarServerAsync(string id, string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarServerWithHttpInfoAsync(id, reportingHost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Server ID</param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarServerWithHttpInfoAsync(string id, string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->RadarServer");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/servers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarServers(string? reportingHost = default(string?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarServersWithHttpInfo(reportingHost);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarServersWithHttpInfo(string? reportingHost = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/servers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarServersAsync(string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarServersWithHttpInfoAsync(reportingHost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarServersWithHttpInfoAsync(string? reportingHost = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/servers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarStation(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarStationWithHttpInfo(stationId, reportingHost, host);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarStationWithHttpInfo(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStation");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "host", host));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarStation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/stations/{stationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarStationAsync(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarStationWithHttpInfoAsync(stationId, reportingHost, host, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarStationWithHttpInfoAsync(string stationId, string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStation");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "host", host));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarStation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/stations/{stationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarStationAlarms(string stationId, int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarStationAlarmsWithHttpInfo(stationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarStationAlarmsWithHttpInfo(string stationId, int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationAlarms");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.RadarStationAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/stations/{stationId}/alarms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStationAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarStationAlarmsAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarStationAlarmsWithHttpInfoAsync(stationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Radar station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarStationAlarmsWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationAlarms");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.RadarStationAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/stations/{stationId}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStationAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RadarStations(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = RadarStationsWithHttpInfo(stationType, reportingHost, host);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> RadarStationsWithHttpInfo(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "stationType", stationType));
            }
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "host", host));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/radar/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RadarStationsAsync(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await RadarStationsWithHttpInfoAsync(stationType, reportingHost, host, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> RadarStationsWithHttpInfoAsync(List<string>? stationType = default(List<string>?), string? reportingHost = default(string?), string? host = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (stationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "stationType", stationType));
            }
            if (reportingHost != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "reportingHost", reportingHost));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "host", host));
            }

            localVarRequestOptions.Operation = "DefaultApi.RadarStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/radar/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RadarStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        [Obsolete]
        public System.IO.Stream SatelliteThumbnails(string area, int operationIndex = 0)
        {
            ApiResponse<System.IO.Stream> localVarResponse = SatelliteThumbnailsWithHttpInfo(area);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        [Obsolete]
        public ApiResponse<System.IO.Stream> SatelliteThumbnailsWithHttpInfo(string area, int operationIndex = 0)
        {
            // verify the required parameter 'area' is set
            if (area == null)
            {
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->SatelliteThumbnails");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("area", ClientUtils.ParameterToString(area)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SatelliteThumbnails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/thumbnails/satellite/{area}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SatelliteThumbnails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<System.IO.Stream> SatelliteThumbnailsAsync(string area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<System.IO.Stream> localVarResponse = await SatelliteThumbnailsWithHttpInfoAsync(area, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region. Image services in API are deprecated.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="area">.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> SatelliteThumbnailsWithHttpInfoAsync(string area, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'area' is set
            if (area == null)
            {
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->SatelliteThumbnails");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("area", ClientUtils.ParameterToString(area)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SatelliteThumbnails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/thumbnails/satellite/{area}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SatelliteThumbnails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific SIGMET/AIRMET
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature Sigmet(string atsu, DateTime date, string time, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = SigmetWithHttpInfo(atsu, date, time);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific SIGMET/AIRMET
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> SigmetWithHttpInfo(string atsu, DateTime date, string time, int operationIndex = 0)
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->Sigmet");
            }

            // verify the required parameter 'time' is set
            if (time == null)
            {
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->Sigmet");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/vnd.noaa.uswx+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Sigmet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/aviation/sigmets/{atsu}/{date}/{time}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Sigmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a specific SIGMET/AIRMET
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> SigmetAsync(string atsu, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await SigmetWithHttpInfoAsync(atsu, date, time, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific SIGMET/AIRMET
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> SigmetWithHttpInfoAsync(string atsu, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->Sigmet");
            }

            // verify the required parameter 'time' is set
            if (time == null)
            {
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->Sigmet");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/vnd.noaa.uswx+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Sigmet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/aviation/sigmets/{atsu}/{date}/{time}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Sigmet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection SigmetQuery(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = SigmetQueryWithHttpInfo(start, end, date, atsu, sequence);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> SigmetQueryWithHttpInfo(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (atsu != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "atsu", atsu));
            }
            if (sequence != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sequence", sequence));
            }

            localVarRequestOptions.Operation = "DefaultApi.SigmetQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/aviation/sigmets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> SigmetQueryAsync(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await SigmetQueryWithHttpInfoAsync(start, end, date, atsu, sequence, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="date">Date (YYYY-MM-DD format) (optional)</param>
        /// <param name="atsu">ATSU identifier (optional)</param>
        /// <param name="sequence">SIGMET sequence number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetQueryWithHttpInfoAsync(DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), DateTime? date = default(DateTime?), string? atsu = default(string?), string? sequence = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (atsu != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "atsu", atsu));
            }
            if (sequence != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sequence", sequence));
            }

            localVarRequestOptions.Operation = "DefaultApi.SigmetQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/aviation/sigmets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection SigmetsByATSU(string atsu, int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = SigmetsByATSUWithHttpInfo(atsu);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> SigmetsByATSUWithHttpInfo(string atsu, int operationIndex = 0)
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->SigmetsByATSU");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SigmetsByATSU";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/aviation/sigmets/{atsu}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetsByATSU", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> SigmetsByATSUAsync(string atsu, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await SigmetsByATSUWithHttpInfoAsync(atsu, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetsByATSUWithHttpInfoAsync(string atsu, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->SigmetsByATSU");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SigmetsByATSU";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/aviation/sigmets/{atsu}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetsByATSU", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection SigmetsByATSUByDate(string atsu, DateTime date, int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = SigmetsByATSUByDateWithHttpInfo(atsu, date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> SigmetsByATSUByDateWithHttpInfo(string atsu, DateTime date, int operationIndex = 0)
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->SigmetsByATSUByDate");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SigmetsByATSUByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/aviation/sigmets/{atsu}/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetsByATSUByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> SigmetsByATSUByDateAsync(string atsu, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await SigmetsByATSUByDateWithHttpInfoAsync(atsu, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="atsu">ATSU identifier</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> SigmetsByATSUByDateWithHttpInfoAsync(string atsu, DateTime date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'atsu' is set
            if (atsu == null)
            {
                throw new ApiException(400, "Missing required parameter 'atsu' when calling DefaultApi->SigmetsByATSUByDate");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("atsu", ClientUtils.ParameterToString(atsu)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.SigmetsByATSUByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/aviation/sigmets/{atsu}/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SigmetsByATSUByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature StationObservationLatest(string stationId, bool? requireQc = default(bool?), int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = StationObservationLatestWithHttpInfo(stationId, requireQc);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> StationObservationLatestWithHttpInfo(string stationId, bool? requireQc = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationLatest");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.uswx+xml",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (requireQc != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "require_qc", requireQc));
            }

            localVarRequestOptions.Operation = "DefaultApi.StationObservationLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/stations/{stationId}/observations/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> StationObservationLatestAsync(string stationId, bool? requireQc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await StationObservationLatestWithHttpInfoAsync(stationId, requireQc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> StationObservationLatestWithHttpInfoAsync(string stationId, bool? requireQc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationLatest");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.uswx+xml",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (requireQc != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "require_qc", requireQc));
            }

            localVarRequestOptions.Operation = "DefaultApi.StationObservationLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/stations/{stationId}/observations/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection StationObservationList(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = StationObservationListWithHttpInfo(stationId, start, end, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> StationObservationListWithHttpInfo(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationList");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.StationObservationList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/stations/{stationId}/observations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> StationObservationListAsync(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await StationObservationListWithHttpInfoAsync(stationId, start, end, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> StationObservationListWithHttpInfoAsync(string stationId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationList");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.StationObservationList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/stations/{stationId}/observations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a single observation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature StationObservationTime(string stationId, DateTime time, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = StationObservationTimeWithHttpInfo(stationId, time);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single observation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> StationObservationTimeWithHttpInfo(string stationId, DateTime time, int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationTime");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.uswx+xml",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StationObservationTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/stations/{stationId}/observations/{time}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a single observation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> StationObservationTimeAsync(string stationId, DateTime time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await StationObservationTimeWithHttpInfoAsync(stationId, time, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single observation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="time">Timestamp of requested observation</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> StationObservationTimeWithHttpInfoAsync(string stationId, DateTime time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationObservationTime");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.uswx+xml",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.StationObservationTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/stations/{stationId}/observations/{time}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StationObservationTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a single Terminal Aerodrome Forecast.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Taf(string stationId, DateTime date, string time, int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = TafWithHttpInfo(stationId, date, time);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single Terminal Aerodrome Forecast.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> TafWithHttpInfo(string stationId, DateTime date, string time, int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->Taf");
            }

            // verify the required parameter 'time' is set
            if (time == null)
            {
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->Taf");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.wmo.iwxxm+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Taf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/stations/{stationId}/tafs/{date}/{time}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a single Terminal Aerodrome Forecast.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TafAsync(string stationId, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await TafWithHttpInfoAsync(stationId, date, time, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single Terminal Aerodrome Forecast.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="date">Date (YYYY-MM-DD format)</param>
        /// <param name="time">Time (HHMM format). This time is always specified in UTC (Zulu) time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> TafWithHttpInfoAsync(string stationId, DateTime date, string time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->Taf");
            }

            // verify the required parameter 'time' is set
            if (time == null)
            {
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->Taf");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.wmo.iwxxm+xml",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Taf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/stations/{stationId}/tafs/{date}/{time}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Taf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object Tafs(string stationId, int operationIndex = 0)
        {
            ApiResponse<object> localVarResponse = TafsWithHttpInfo(stationId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> TafsWithHttpInfo(string stationId, int operationIndex = 0)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->Tafs");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Tafs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/stations/{stationId}/tafs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Tafs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TafsAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<object> localVarResponse = await TafsWithHttpInfoAsync(stationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns Terminal Aerodrome Forecasts for the specified airport station.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Observation station ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> TafsWithHttpInfoAsync(string stationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
            {
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->Tafs");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stationId", ClientUtils.ParameterToString(stationId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.Tafs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/stations/{stationId}/tafs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Tafs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature Zone(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = ZoneWithHttpInfo(type, zoneId, effective);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> ZoneWithHttpInfo(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->Zone");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.Zone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/zones/{type}/{zoneId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Zone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> ZoneAsync(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await ZoneWithHttpInfoAsync(type, zoneId, effective, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> ZoneWithHttpInfoAsync(NWSZoneType type, string zoneId, DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->Zone");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.Zone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/zones/{type}/{zoneId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Zone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feature</returns>
        public Feature ZoneForecast(string type, string zoneId, int operationIndex = 0)
        {
            ApiResponse<Feature> localVarResponse = ZoneForecastWithHttpInfo(type, zoneId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse<Feature> ZoneForecastWithHttpInfo(string type, string zoneId, int operationIndex = 0)
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZoneForecast");
            }

            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneForecast");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ZoneForecast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feature>("/zones/{type}/{zoneId}/forecast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> ZoneForecastAsync(string type, string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<Feature> localVarResponse = await ZoneForecastWithHttpInfoAsync(type, zoneId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> ZoneForecastWithHttpInfoAsync(string type, string zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZoneForecast");
            }

            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneForecast");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.ZoneForecast";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feature>("/zones/{type}/{zoneId}/forecast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection ZoneList(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = ZoneListWithHttpInfo(id, area, region, type, point, includeGeometry, limit, effective);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> ZoneListWithHttpInfo(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (includeGeometry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "include_geometry", includeGeometry));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/zones", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> ZoneListAsync(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await ZoneListWithHttpInfoAsync(id, area, region, type, point, includeGeometry, limit, effective, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneListWithHttpInfoAsync(List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (includeGeometry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "include_geometry", includeGeometry));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/zones", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection ZoneListType(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = ZoneListTypeWithHttpInfo(type, id, area, region, type2, point, includeGeometry, limit, effective);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> ZoneListTypeWithHttpInfo(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (type2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type2));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (includeGeometry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "include_geometry", includeGeometry));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneListType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/zones/{type}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneListType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> ZoneListTypeAsync(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await ZoneListTypeWithHttpInfoAsync(type, id, area, region, type2, point, includeGeometry, limit, effective, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Zone type</param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type2">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneListTypeWithHttpInfoAsync(NWSZoneType type, List<string>? id = default(List<string>?), List<AreaCode>? area = default(List<AreaCode>?), List<RegionCode>? region = default(List<RegionCode>?), List<NWSZoneType>? type2 = default(List<NWSZoneType>?), string? point = default(string?), bool? includeGeometry = default(bool?), int? limit = default(int?), DateTime? effective = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("type", ClientUtils.ParameterToString(type)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "id", id));
            }
            if (area != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "area", area));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "region", region));
            }
            if (type2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("csv", "type", type2));
            }
            if (point != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "point", point));
            }
            if (includeGeometry != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "include_geometry", includeGeometry));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (effective != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "effective", effective));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneListType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/zones/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneListType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection ZoneObs(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = ZoneObsWithHttpInfo(zoneId, start, end, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> ZoneObsWithHttpInfo(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneObs");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneObs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/zones/forecast/{zoneId}/observations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneObs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> ZoneObsAsync(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await ZoneObsWithHttpInfoAsync(zoneId, start, end, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneObsWithHttpInfoAsync(string zoneId, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneObs");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneObs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/zones/forecast/{zoneId}/observations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneObs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection ZoneStations(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            ApiResponse<FeatureCollection> localVarResponse = ZoneStationsWithHttpInfo(zoneId, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse<FeatureCollection> ZoneStationsWithHttpInfo(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneStations");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeatureCollection>("/zones/forecast/{zoneId}/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> ZoneStationsAsync(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FeatureCollection> localVarResponse = await ZoneStationsWithHttpInfoAsync(zoneId, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">NWS public zone/county identifier</param>
        /// <param name="limit">Limit (optional, default to 500)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> ZoneStationsWithHttpInfoAsync(string zoneId, int? limit = default(int?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
            {
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZoneStations");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zoneId", ClientUtils.ParameterToString(zoneId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "DefaultApi.ZoneStations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (userAgent) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("User-Agent")))
            {
                localVarRequestOptions.HeaderParameters.Add("User-Agent", this.Configuration.GetApiKeyWithPrefix("User-Agent"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeatureCollection>("/zones/forecast/{zoneId}/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ZoneStations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
