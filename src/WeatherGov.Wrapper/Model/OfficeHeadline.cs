/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace WeatherGov.Wrapper.Model
{
    /// <summary>
    /// OfficeHeadline
    /// </summary>
    [DataContract(Name = "OfficeHeadline")]
    public partial class OfficeHeadline : IEquatable<OfficeHeadline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfficeHeadline" /> class.
        /// </summary>
        /// <param name="context">context.</param>
        /// <param name="id">id.</param>
        /// <param name="office">office.</param>
        /// <param name="important">important.</param>
        /// <param name="issuanceTime">issuanceTime.</param>
        /// <param name="link">link.</param>
        /// <param name="name">name.</param>
        /// <param name="title">title.</param>
        /// <param name="summary">summary.</param>
        /// <param name="content">content.</param>
        public OfficeHeadline(JsonLdContext context = default(JsonLdContext), string id = default(string), string office = default(string), bool important = default(bool), DateTime issuanceTime = default(DateTime), string link = default(string), string name = default(string), string title = default(string), string summary = default(string), string content = default(string))
        {
            this.Context = context;
            this.Id = id;
            this.Office = office;
            this.Important = important;
            this.IssuanceTime = issuanceTime;
            this.Link = link;
            this.Name = name;
            this.Title = title;
            this.Summary = summary;
            this.Content = content;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "@context", EmitDefaultValue = false)]
        public JsonLdContext Context { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Office
        /// </summary>
        [DataMember(Name = "office", EmitDefaultValue = false)]
        public string Office { get; set; }

        /// <summary>
        /// Gets or Sets Important
        /// </summary>
        [DataMember(Name = "important", EmitDefaultValue = true)]
        public bool Important { get; set; }

        /// <summary>
        /// Gets or Sets IssuanceTime
        /// </summary>
        [DataMember(Name = "issuanceTime", EmitDefaultValue = false)]
        public DateTime IssuanceTime { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = true)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfficeHeadline {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Office: ").Append(Office).Append("\n");
            sb.Append("  Important: ").Append(Important).Append("\n");
            sb.Append("  IssuanceTime: ").Append(IssuanceTime).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OfficeHeadline);
        }

        /// <summary>
        /// Returns true if OfficeHeadline instances are equal
        /// </summary>
        /// <param name="input">Instance of OfficeHeadline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfficeHeadline input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Office == input.Office ||
                    (this.Office != null &&
                    this.Office.Equals(input.Office))
                ) && 
                (
                    this.Important == input.Important ||
                    this.Important.Equals(input.Important)
                ) && 
                (
                    this.IssuanceTime.Equals(input.IssuanceTime)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Office != null)
                {
                    hashCode = (hashCode * 59) + this.Office.GetHashCode();
                }

                hashCode = (hashCode * 59) + this.Important.GetHashCode();

                hashCode = (hashCode * 59) + this.IssuanceTime.GetHashCode();

                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
