/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace WeatherGov.Wrapper.Model
{
    /// <summary>
    /// AlertsTypes200Response
    /// </summary>
    [DataContract(Name = "alerts_types_200_response")]
    public partial class AlertsTypes200Response : IEquatable<AlertsTypes200Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsTypes200Response" /> class.
        /// </summary>
        /// <param name="eventTypes">A list of recognized event types.</param>
        public AlertsTypes200Response(List<string> eventTypes = default(List<string>))
        {
            this.EventTypes = eventTypes;
        }

        /// <summary>
        /// A list of recognized event types
        /// </summary>
        /// <value>A list of recognized event types</value>
        [DataMember(Name = "eventTypes", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlertsTypes200Response {\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertsTypes200Response);
        }

        /// <summary>
        /// Returns true if AlertsTypes200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertsTypes200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertsTypes200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventTypes == input.EventTypes ||
                    this.EventTypes != null &&
                    input.EventTypes != null &&
                    this.EventTypes.SequenceEqual(input.EventTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventTypes != null)
                {
                    hashCode = (hashCode * 59) + this.EventTypes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
