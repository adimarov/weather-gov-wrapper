/*
 * weather.gov API
 *
 * weather.gov API
 *
 * The version of the OpenAPI document: 1.11.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.ComponentModel.DataAnnotations;

namespace WeatherGov.Wrapper.Model
{
    /// <summary>
    /// Glossary200ResponseGlossaryInner
    /// </summary>
    [DataContract(Name = "glossary_200_response_glossary_inner")]
    public partial class Glossary200ResponseGlossaryInner : IEquatable<Glossary200ResponseGlossaryInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Glossary200ResponseGlossaryInner" /> class.
        /// </summary>
        /// <param name="term">The term being defined.</param>
        /// <param name="definition">A definition for the term.</param>
        public Glossary200ResponseGlossaryInner(string term = default(string), string definition = default(string))
        {
            this.Term = term;
            this.Definition = definition;
        }

        /// <summary>
        /// The term being defined
        /// </summary>
        /// <value>The term being defined</value>
        [DataMember(Name = "term", EmitDefaultValue = false)]
        public string Term { get; set; }

        /// <summary>
        /// A definition for the term
        /// </summary>
        /// <value>A definition for the term</value>
        [DataMember(Name = "definition", EmitDefaultValue = false)]
        public string Definition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Glossary200ResponseGlossaryInner {\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Glossary200ResponseGlossaryInner);
        }

        /// <summary>
        /// Returns true if Glossary200ResponseGlossaryInner instances are equal
        /// </summary>
        /// <param name="input">Instance of Glossary200ResponseGlossaryInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Glossary200ResponseGlossaryInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Term == input.Term ||
                    (this.Term != null &&
                    this.Term.Equals(input.Term))
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Term != null)
                {
                    hashCode = (hashCode * 59) + this.Term.GetHashCode();
                }
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
